apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'me.tatarka.retrolambda'
/*apply plugin: 'bugly'

bugly {
    appId = "f7c8c8f49a"
    appKey = "b95edd00-8572-47de-9df2-25bbae8bce2a"
}*/
//编译加快
//apply plugin: 'fastdex.app'


android {
    compileOptions.encoding = "UTF-8"
    updateVersionConfig()
    compileSdkVersion 26
    buildToolsVersion '25.0.3'
    signingConfigs {
        //签名设置
        release {
            keyAlias RELEASE_KEY_ALIAS
            keyPassword RELEASE_KEY_PASSWORD
            storeFile file(RELEASE_STORE_FILE)
            storePassword RELEASE_STORE_PASSWORD
        }
    }
    defaultConfig {
        multiDexEnabled true
        applicationId "com.cpigeon.app"
        minSdkVersion 17
        targetSdkVersion 26
        versionCode getCustomVersionCode()
        versionName getCustomVersionName()
        signingConfig signingConfigs.release //默认签名配置
        vectorDrawables.useSupportLibrary = true
        //testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "SERVER", "\"http://www.cpigeon.com:818\"" //默认服务器地址配置
        ndk {
            //选择要添加的对应cpu类型的.so库。
            abiFilters 'armeabi', 'armeabi-v7a', 'armeabi-v8a', 'x86', 'x86_64', 'mips', 'mips64'
//            abiFilters 'armeabi', 'armeabi-v7a','x86', 'armeabi-v8a'
        }
        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "1040749beca7f03dc6211519", //JPush上注册的包名对应的appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
    }
    //修改生成的apk名字
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def oldFile = output.outputFile
            def newName = '';
            if (variant.buildType.name.equals('release')) {
//                println(variant.productFlavors[0].name)
                //def releaseApkName = 'app-release-v' + getCustomVersionName() + '-' + variant.productFlavors[0].name + '-' + getCustomVersionCode() + '.apk'
                newName = oldFile.name.replace(".apk", "-v" + getCustomVersionName() + "-" + getCustomVersionCode() + ".apk")
                output.outputFile = new File(oldFile.parent, newName)
            }
            if (variant.buildType.name.equals('beta')) {
                newName = oldFile.name.replace(".apk", "-v" + getCustomVersionName() + "-beta" + getDate() + ".apk")
                output.outputFile = new File(oldFile.parent, newName)
            }
            if (variant.buildType.name.equals('debug')) {
                /*newName = oldFile.name.replace(".apk", "-v" + getCustomVersionName() + "-" + getCustomVersionCode() + ".apk")
                output.outputFile = new File(oldFile.parent, newName)*/
            }
        }
    }
    buildTypes {
        release {
            /*proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //混淆
            minifyEnabled true
            //Zipalign优化
            zipAlignEnabled true
             //移除无用的resource文件
           shrinkResources true*/
            signingConfig signingConfigs.release
        }
        debug {
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
//            //混淆
//            minifyEnabled true
//            // 移除无用的resource文件
//            shrinkResources true
            buildConfigField "String", "SERVER", "\"http://192.168.0.18:818\"" //配置BuildConfig字段
            signingConfig signingConfigs.release
        }
    }
    productFlavors {
        cpigeon {
            //中鸽官网
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    productFlavors.all {
        flavor -> flavor.manifestPlaceholders = [CHANNEL_VALUE: name]
    }

}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.1.0'
    //Gson
    compile 'com.google.code.gson:gson:2.8.0'
    //权限管理
    compile 'com.tbruyelle.rxpermissions2:rxpermissions:0.9.5@aar'
    compile 'com.github.hotchemi:permissionsdispatcher:2.3.2'
    //视图注解
    compile 'com.jakewharton:butterknife:8.5.1'
    //视频播放
    compile 'cn.jzvd:jiaozivideoplayer:6.1.2'
    //图片加载
    compile 'com.squareup.picasso:picasso:2.5.2'
    //底部TabBar
    compile 'com.ashokvarma.android:bottom-navigation-bar:1.4.1'
    compile 'com.roughike:bottom-bar:2.3.1'
    //dex分包兼容5.0
    compile 'com.android.support:multidex:1.0.1'
    compile 'de.hdodenhof:circleimageview:2.1.0'
    compile 'com.android.support:design:26.1.0'
    compile 'com.android.support:support-v4:26.1.0'
    compile 'com.android.support:cardview-v7:26.1.0'
    compile 'com.android.support:recyclerview-v7:26.1.0'
    compile 'com.android.support:gridlayout-v7:26.1.0'
    compile 'com.youth.banner:banner:1.4.9'
    compile 'org.xutils:xutils:3.5.0'
    compile 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.8'
    //其中lat est.release指代最新版本号，也可以指定明确的版本号，例如2.1.5
    compile 'com.tencent.bugly:crashreport:latest.release'
    //其中latest.release指代最新版本号，也可以指定明确的版本号，例如2.2.0
    compile 'com.tencent.bugly:nativecrashreport:latest.release'
    compile 'cn.bingoogolapple:bga-badgeview:1.1.3'
    compile 'cn.pedant.sweetalert:library:1.3'
    compile 'com.orhanobut:logger:1.15'
    compile 'com.kyleduo.switchbutton:library:1.4.5'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'
    testCompile 'junit:junit:4.12'
    annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:2.3.2'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    // 此处以JPush 3.0.3 版本为例。
    compile 'cn.jiguang.sdk:jpush:3.0.3'
    // 此处以JCore 1.1.1 版本为例。
    compile 'cn.jiguang.sdk:jcore:1.1.1'
    compile 'com.alibaba:fastjson:1.2.31'
    //可展开收起的textView
    compile 'cn.carbs.android:ExpandableTextView:1.0.3'
    //boommenu
    //compile 'com.nightonke:boommenu:2.1.0'
    compile 'com.github.clans:fab:1.6.4'
    testCompile 'junit:junit:4.12'
    annotationProcessor 'com.github.hotchemi:permissionsdispatcher-processor:2.3.2'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
    compile 'com.github.LuckSiege.PictureSelector:picture_library:v2.0.4'
    compile 'com.flyco.roundview:FlycoRoundView_Lib:1.1.2@aar'
    compile 'com.flyco.tablayout:FlycoTabLayout_Lib:1.5.0@aar'
    compile 'com.github.vipulasri:timelineview:1.0.5'
//    compile 'com.amap.api:navi-3dmap:latest.integration'
//    compile 'com.amap.api:location:latest.integration'
//    compile 'com.amap.api:search:latest.integration'
    compile 'com.amap.api:3dmap:5.0.0'
    compile 'com.amap.api:location:3.3.0'
    compile 'com.amap.api:search:5.0.0'
    //compile 'io.reactivex:rxandroid:1.0.1'
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'com.yqritc:recyclerview-flexibledivider:1.4.0'
    compile 'com.afollestad:easyvideoplayer:0.3.0'
    compile 'com.github.jiang111:IndexRecyclerView:v1.1'
    compile 'com.github.mcxtzhang:SwipeDelMenuLayout:V1.3.0'
    //compile 'com.github.gzu-liyujiang.AndroidPicker:WheelPicker:1.5.5'
    compile('com.github.gzu-liyujiang.AndroidPicker:WheelPicker:1.5.5') {
        exclude group: 'com.android.support'
    }
    compile 'org.greenrobot:eventbus:3.1.1'
    compile 'com.github.lovetuzitong:MultiImageSelector:1.2'
    compile 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    compile 'com.squareup.okhttp3:okhttp:3.7.0'
    compile 'com.github.stfalcon:frescoimageviewer:0.5.0'
    compile 'com.facebook.fresco:fresco:0.12.0'
    compile 'com.github.pinguo-zhouwei:MZBannerView:v2.0.0'
    compile 'pl.droidsonroids.gif:android-gif-drawable:1.2.9'
    //粒子库
    compile 'com.plattysoft.leonids:LeonidsLib:1.3.2'
    compile 'net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:2.1.0'
    compile 'com.wx.goodview:goodview:1.0.0'
    compile 'com.melnykov:floatingactionbutton:1.3.0'
    compile 'com.tencent.mm.opensdk:wechat-sdk-android-with-mta:+'
    compile 'com.shuyu:GSYVideoPlayer:3.0.0'
    compile 'me.weyye.hipermission:library:1.0.7'
    compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'
    compile files('libs/open_sdk_r5788_lite.jar')
    compile files('libs/SocialSDK_WeiXin_Full.jar')
    compile files('libs/SocialSDK_QQ_Full.jar')
    compile files('libs/youtu-java-sdk.jar')
    compile files('libs/json.jar')
    compile files('libs/commons-codec-1.10.jar')
    compile files('libs/libammsdk.jar')
    compile files('libs/umeng_social_api.jar')
    compile files('libs/umeng_social_net.jar')
    compile files('libs/umeng_social_tool.jar')
    //侧边字母
    compile 'com.gjiazhe:wavesidebar:1.3'

    //glide
    compile 'jp.wasabeef:glide-transformations:2.0.0'

    compile 'com.github.hackware1993:MagicIndicator:1.5.0'
}

int getCustomVersionCode() {
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        return versionProps['VERSION_CODE'].toInteger()
    }
}

def getCustomVersionName() {
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))
        def name = versionProps['VERSION_NAME']
        return name
    }
}

def updateVersionConfig() {
    //如果version.properties文件可读则执行操作
    def versionPropsFile = file('version.properties')
    if (versionPropsFile.canRead()) {
        //载入version.properties
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionPropsFile))

        def buildTime = new Date()
        //上次次数重置时间与当前时间作对比
        Date lastResetBuildTime = new Date(versionProps['BUILD_TIMES_RESET_TIME'].toLong())
//        println lastResetBuildTime.year + "/" + lastResetBuildTime.month + "/" + lastResetBuildTime.day
//        println buildTime.year + "/" + buildTime.month + "/" + buildTime.day
        if (lastResetBuildTime.year != buildTime.year || lastResetBuildTime.month != buildTime.month || lastResetBuildTime.day != buildTime.day) {
            //如果重置时间不是当天的日期，则重置次数
            println '重置发布次数'
            versionProps['BUILD_TIMES'] = 0.toString()
            versionProps['BUILD_TIMES_RESET_TIME'] = buildTime.time.toString()
        }
        //写入编译时间
        versionProps['BUILD_LAST_TIME'] = buildTime.time.toString()
        //写入版本代码
        //versionProps['VERSION_CODE'] = new Date().format("yyyyMMdd") + versionProps['BUILD_TIMES'].toString()

        println(versionProps)
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

//获取时间戳
def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmm')
    return formattedDate
}
